{
    field: 'actions',
    headerName: 'Actions',
    width: 80,
    headerClassName: 'view-bill-column',
    cellClassName: 'view-bill-cell',
    renderCell: (params) => (
      <>
        <IconButton
          sx={{ color: '#FFA534',display:'flex',alignItems:'center',justifyContent:'center'}}
          onClick={() => handleDeleteBill(params.row._id)}
          disabled={user.role === 'Junior Engineer' && (params.row.approvedStatus === 'PendingForExecutiveEngineer' || params.row.approvedStatus === 'PendingForAdmin' || params.row.approvedStatus === 'PendingForSuperAdmin' || params.row.approvedStatus === 'Done')}
        >
          <DeleteIcon />
        </IconButton>
        { }
        {/* <IconButton sx={{ color: '#23CCEF' }} onClick={() => handleEditBill(params.row)}
          disabled={user.role === 'Junior Engineer' && (params.row.approvedStatus === 'PendingForExecutiveEngineer' || params.row.approvedStatus === 'PendingForAdmin' || params.row.approvedStatus === 'PendingForSuperAdmin' || params.row.approvedStatus === 'Done')}
        >
          <EditIcon />
        </IconButton> */}
      </>
    ),
  },
  -------------------------------------
    {
      field: '',
      headerName: 'View Bill',
      width: 100,
      renderCell: (params) => (
        <a
          href="https://wss.mahadiscom.in/wss/wss?uiActionName=getPrintBillingDataLink&A=fmXSZ3xEES4TPVAKwG0tSMWJNYrz71nSc6BvD05amvE=&B=ZhnYwVpODJL1fUlTx9Nm2Q==&C=yFp81m+ZxzGn6S519yRouN7Xg84H29CGwUQdb+zL9Ow=&D=ZJHhiacg2C+SEvqPZNHHve46L12tb4XK8s2P85Eb9pU="
          target="_blank"
          rel="noopener noreferrer"
          style={{ textDecoration: 'none', color: 'blue', cursor: 'pointer' }}
        >
          <img src={viewbill} />
        </a>
      ),
    },
    ------------------------------------------
    {
      field: '',
      headerName: 'View Bill',
      width: 100,
      renderCell: (params) => {
        const { billType, billDisplayParameter1, billDisplayParameter2, billDisplayParameter3, billDisplayParameter4 } = params.row;
        
        const billURL = generateBillURL(billType, billDisplayParameter1, billDisplayParameter2, billDisplayParameter3, billDisplayParameter4);
    
        return (
          <a
            href={billURL}
            target="_blank"
            rel="noopener noreferrer"
            style={{ textDecoration: 'none', color: 'blue', cursor: 'pointer' }}
          >
          <VisibilityIcon/>
          </a>
        );
      }
    },
    ---------------------------------------
      // { field: 'currentBillAmount', headerName: 'CURRENT BILL AMOUNT', width: 130 },
        // { field: 'roundedBillAmount', headerName: 'ROUNDED BILL AMOUNT', width: 130 },
        ------------------------------------------
        ...(user?.role === 'Junior Engineer'
      ? [
        {
          field: 'forwardForGeneration',
          headerName: 'FORWARD FOR GENERATION',
          width: 200,
          renderCell: (params) => {
            const isJuniorEngineer = user?.role === 'Junior Engineer';
            const isDisabled = params.row.approvedStatus === 'PendingForExecutiveEngineer' || params.row.approvedStatus === "PendingForSuperAdmin" || params.row.approvedStatus === "PendingForAdmin" || params.row.approvedStatus === "Done" || params.row.approvedStatus === "PartialDone";
            if (!isJuniorEngineer) return null;
            return (
              <Box
                sx={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  gap: 1,
                  height: '100%',
                }}
              >
                <IconButton
                  sx={{ color: '#23CCEF' }}
                  onClick={() => handleApproveClick(params.row, 'Yes')}
                  disabled={params.row.forwardForGeneration === 'Yes' || isDisabled}
                >
                  <Typography>Yes</Typography>
                </IconButton>
                <IconButton
                  sx={{ color: '#23CCEF' }}
                  onClick={() => handleApproveClick(params.row, 'No')}
                  disabled={
                    (params.row.approvedStatus === 'PendingForJuniorEngineer' && params.row.paymentStatus === 'UnPaid' && user?.role === 'Junior Engineer') ||
                    (user?.role === 'Junior Engineer' && ['PendingForAdmin', 'PendingForSuperAdmin', 'Done'].includes(params.row.approvedStatus))
                  }
                >
                  <UndoIcon />
                </IconButton>
              </Box>
            );
          },
        }

      ]
      : []),
      ---------------------------------------
       const generateBillURL = (billType, param1, param2, param3, param4) => {
    if (!billType || !param1 || !param2 || !param3) {
      return "#"; // Return a placeholder if required parameters are missing
    }
  
    let baseURL = "https://wss.mahadiscom.in/wss/wss?uiActionName=getPrintBillingDataLink";
  
    if (billType === "LT") {
      return `${baseURL}&A=${encodeURIComponent(param1)}&B=${encodeURIComponent(param2)}&C=${encodeURIComponent(param3)}&D=${encodeURIComponent(param4)}`;
    } else if (billType === "LTIP" || billType === "HT") {
      console.log(">>>>>>>>>>>>>>>>>>>>",`${baseURL}&A=${encodeURIComponent(param1)}&B=${encodeURIComponent(param2)}&C=${encodeURIComponent(param3)}`)
      return `${baseURL}&A=${encodeURIComponent(param1)}&B=${encodeURIComponent(param2)}&C=${encodeURIComponent(param3)}`;
    }
  
    return "#"; // Default return in case billType doesn't match
  };
  =========================
  import UndoIcon from '@mui/icons-material/Undo';
import DeleteIcon from '@mui/icons-material/Delete';
===================================================
exports.verifyEmail = async (req, res) => {
  console.log("verifyemail",req,"\n",req.query)
  const { token } = req.query;
 

  try {
    const user = await User.findOne({ verificationToken: token });

    if (!user) {
      return res.status(400).json({ message: "Invalid or expired token" });
    }

    user.isVerified = true;
    user.verificationToken = undefined; // Remove the verification token after successful verification
    await user.save();
    res.sendFile(viewfile)
    // res.status(200).json({ message: "Email verified successfully" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};
===========================
import EditIcon from '@mui/icons-material/Edit';
import viewimage2 from '../Images/viewimage2.jfif';
--------------------------------------
import Tooltip, { tooltipClasses } from '@mui/material/Tooltip';
---------------------------------
 meterPurpose: bill?.meterPurpose || '-',
 installationDate:formatDate(bill?.installationDate)||'-',
 email: bill?.email,
 ----------------------------------
 <Button
              sx={{
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                backgroundColor: '#23CCEF',
                color: '#ffffff',
                fontSize: '16px',
                fontWeight: 'bold',
                borderRadius: {
                  xl:'8px',
                  lg:'8px',
                  md:'8px',
                  sm:'8px',
                  xs:'8px'
                },
                transition: 'background-color 0.3s ease, transform 0.2s ease',
                '&:hover': {
                  backgroundColor: '#23CCEF',
                 
                  opacity: 0.7, 
                 
                  transform: 'scale(1.02)', 
                },
                '&:active': {
                  transform: 'scale(0.98)', 
                },
                justifyContent:{
                  xl:'center',
                  lg:'center',
                  md:'center',
                  sm:'center',
                  xs:'center'

                },
                alignItems:{
                  xl:'center',
                  lg:'center',
                  md:'center',
                  sm:'center',
                  xs:'center'

                },
                mt:{
                  xl:0,lg:0,md:0,sm:1,xs:1
                },
                
                width:{
                  xl:'150px',
                  lg:'150px',
                  md:'90px',
                  sm:'80%',
                  xs:'80%'
                  
                }
                
              }}
              onClick={handleProcessClick}
              disabled={
                user.role === 'Junior Engineer' &&
                selectedItems.length > 0 &&
                selectedItems.every(item => item.approvedStatus === 'PendingForExecutiveEngineer')
              }
            >
              <Typography sx={{fontSize:{xl:'17px',lg:'17px',md:'12px',sm:'15px',xs:'15px'},fontWeight:'bold',
            textTransform:{
              xl:'capitalize',
              lg:'capitalize',
              md:'uppercase',
              sm:'uppercase',
              xs:'uppercase',
            }
            
            }}>Process</Typography>
            </Button>
            =======================================
            <Button
              sx={{
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                backgroundColor: '#23CCEF',
                color: '#ffffff',
                
                fontSize: '12px',
                fontWeight: 'bold',
                borderRadius: {
                  xl:'8px',
                  lg:'8px',
                  md:'8px',
                  sm:'8px',
                  xs:'8px'
                },
                transition: 'background-color 0.3s ease, transform 0.2s ease',
                '&:hover': {
                  backgroundColor: '#23CCEF',
                  opacity: 0.7, 
                  transform: 'scale(1.02)',
                },
                '&:active': {
                  transform: 'scale(0.98)', 
                },



                justifyContent: {
                  xl:'center',
                  lg:'center',
                  md:'center',
                  sm:'center',
                  xs:'center'
                },
                mt:{
                  xl:0,lg:0,md:0,sm:1,xs:1
                },
                mb:{
                  xl:0,lg:0,md:0,sm:1,xs:1
                },
                width:{
                  xl:'180px',
                  lg:'180px',
                  md:'170px',
                  sm:'80%',
                  xs:'80%'
                }
                
              }}
              onClick={handleReverseApprovals}
              disabled={
                user.role === 'Junior Engineer' &&
                selectedItems.length > 0 &&
                selectedItems.every(item => item.approvedStatus === 'PendingForJuniorEngineer')
              }

            >
              <Typography sx={{fontSize:{xl:'17px',lg:'17px',md:'12px',sm:'15px',xs:'15px'},fontWeight:'bold',
             textTransform:{
              xl:'capitalize',
              lg:'capitalize',
              md:'uppercase',
              sm:'uppercase',
              xs:'uppercase',
            }
            }}>Rollback Approvals</Typography>
            </Button>
            ===================================
              <Button
            className="animated-button"
              sx={{
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                backgroundColor: '#23CCEF',
                color: '#ffffff',
                fontWeight: 'bold',
                borderRadius: {
                  xl:'8px',
                  lg:'8px',
                  md:'8px',
                  sm:'8px',
                  xs:'8px'
                },
                transition: 'background-color 0.3s ease, transform 0.2s ease',
                '&:hover': {
                  backgroundColor: '#23CCEF',
                  opacity: 0.7, 
                  transform: 'scale(1.02)', 
                },
                '&:active': {
                  transform: 'scale(0.98)', 
                },
                justifyContent: {
                  xl:'center',
                  lg:'center',
                  md:'center',
                  sm:'center',
                  xs:'center'
                },
                width:{
                  xl:'180px',
                  lg:'190px',
                  md:'190px',
                  sm:'80%',
                  xs:'80%'
                },
                mb:{
                  xl:0,lg:0,md:0,sm:1,xs:1
                },
              }}
              onClick={downloadAllTypsOfReport}
            >
              <DownloadIcon sx={{ marginLeft: '1px',fontSize:'15px' }} />
              <Typography sx={{fontSize:{xl:'17px',lg:'17px',md:'12px',sm:'15px',xs:'15px'},fontWeight:'bold',
             textTransform:{
              xl:'capitalize',
              lg:'capitalize',
              md:'uppercase',
              sm:'uppercase',
              xs:'uppercase',
            }
            }}>Download Reports</Typography>
            </Button>
            =====================================
            vasai virar bill address->identify kas karnar=>address varun consumer identify hoil na? ajun kahi aahe ka?=>New connection kaay karayach
-------------------------------
 <Button
            className="animated-button"
              sx={{
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                backgroundColor: '#23CCEF',
                color: '#ffffff',
                fontWeight: 'bold',
                borderRadius: {
                  xl:'8px',
                  lg:'8px',
                  md:'8px',
                  sm:'8px',
                  xs:'8px'
                },
                transition: 'background-color 0.3s ease, transform 0.2s ease',
                '&:hover': {
                  backgroundColor: '#23CCEF',
                  opacity: 0.7, 
                  transform: 'scale(1.02)', 
                },
                '&:active': {
                  transform: 'scale(0.98)', 
                },
                justifyContent: {
                  xl:'center',
                  lg:'center',
                  md:'center',
                  sm:'center',
                  xs:'center'
                },
                width:{
                  xl:'210px',
                  lg:'210px',
                  md:'190px',
                  sm:'80%',
                  xs:'80%'
                },
                mb:{
                  xl:0,lg:0,md:'0px',sm:1,xs:1
                },
              }}
              onClick={handleDownloadReport}
            >
              <DownloadIcon sx={{ marginLeft: '1px',fontSize:'15px' }} />
              <Typography sx={{fontSize:{xl:'17px',lg:'17px',md:'12px',sm:'15px',xs:'15px'},fontWeight:'bold',
              textTransform:{
              xl:'capitalize',
              lg:'capitalize',
              md:'uppercase',
              sm:'uppercase',
              xs:'uppercase',
            }
            
            }}>Faulty | Average Bills</Typography>
            </Button>
            ========================================
              // let filteredData = cnId ? combinedData.filter(bill => bill.consumerNumber === cnId) : combinedData;
              ============================================
              <Button
              sx={{
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                backgroundColor: '#23CCEF',
                color: '#ffffff',
                fontSize: '16px',
                fontWeight: 'bold',
                borderRadius: {
                  xl:'8px',
                  lg:'8px',
                  md:'8px',
                  sm:'8px',
                  xs:'8px'
                },
                transition: 'background-color 0.3s ease, transform 0.2s ease',
                '&:hover': {
                  backgroundColor: '#23CCEF',
                  opacity: 0.7,
                  transform: 'scale(1.02)', 
                },
                '&:active': {
                  transform: 'scale(0.98)', 
                },


                justifyContent: {xl:'center',lg:'center',md:'center',sm:'center',xs:'center'},


                width:{
                  xl:'180px',
                  lg:'180px',
                  md:'100px',
                  sm:'80%',
                  xs:'80%'
                },
              }}
              onClick={handleAddBillOpen}
            >
              <AddIcon sx={{ marginLeft: '2px',fontSize:'15px' }} />
              <Typography onClick={handleAddBillOpen} sx={{fontSize:{xl:'17px',lg:'17px',md:'12px',sm:'15px',xs:'15px'},fontWeight:'bold',
             textTransform:{
              xl:'capitalize',
              lg:'capitalize',
              md:'uppercase',
              sm:'uppercase',
              xs:'uppercase',
            }}} >Add Bill</Typography>
            </Button>
=============================================
  // installationDate: formatDate(bill?.installationDate) || '-',
    // { field: 'installationDate', headerName: 'स्थापना दिनांक', width: 130 },
      // rowData.installationDate || 'N/A',
       // firstRow.installationDate || 'N/A',
       =================================
       form 120
       -----
         <Modal open={billOpen} onClose={handleAddBillClose}>
          <AddBill open={billOpen} handleClose={handleAddBillClose} handleAddBill={handleAddBill}
            currentBill={currentBill}
            editBill={(billId, billData) => {
              dispatch(editBill(billId, billData));
              dispatch(fetchBills());
            }}
          />
        </Modal>
        ==========================================
           <Button
              sx={{
                color: '#23CCEF',
                border: '0.1px solid #23CCEF',
                cursor: 'pointer',
                textTransform: 'none',
                display: 'flex',
                justifyContent: 'space-between',
                width: getResponsiveWidth(),
                height: '65%',
                mt: {
                  xs: '10px'
                },
                mb: {
                  xs: '10px'
                },
                marginLeft: {
                  xs: '30px',
                  sm: '30px',
                  md: shouldDisplayTextField === false ? '10px' : '0px',
                  lg: shouldDisplayTextField === false ? '10px' : '0px',
                  xl: shouldDisplayTextField === false ? '10px' : '0px',
                },

              }}
              onClick={handleDownloadReport}
            >
              <DownloadIcon sx={{ marginLeft: '1px' }} />
              <Typography sx={{
                fontSize: isSidebarOpen ? '12.2px' : '14px',

              }} >Download Report</Typography>
            </Button>
            ========================
            consumer master
            -----------
            const importExcel = (event) => {
    const file = event.target.files[0]; 
    if (!file) return;
  
    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
  
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
  
      const jsonData = XLSX.utils.sheet_to_json(sheet);
      console.log("Parsed Excel Data:", jsonData);
  
      // Send Data to Backend
      fetch(`${baseUrl}/import-excel`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(jsonData),
      })
      .then(response => response.json())
      .then(data => console.log("Response from backend:", data))
      .catch(error => console.error("Error:", error));
    };
  
    reader.readAsArrayBuffer(file);
  };
  ============================================================
    const importExcel = (event) => {
    const file = event.target.files[0]; 
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });

        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];

        const jsonData = XLSX.utils.sheet_to_json(sheet);

        // Clean up the data to remove unnecessary columns and map required fields
        const cleanedData = jsonData.map(item => ({
            consumerNumber: item.consumerNumber || '', // Make sure to handle missing data
            consumerAddress: item.consumerAddress || '',
              ward: item.ward || '',
                meterPurpose: item.meterPurpose || '',
                phaseType: item.phaseType || ''
        }));

        console.log("Cleaned Excel Data:", cleanedData);

        // Send cleaned data to backend
        fetch(`${baseUrl}/import-excel`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(cleanedData),
        })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            alert(data.message); // Display success message to the user
        })
        .catch(error => {
            console.error("Error:", error);
            alert('Error importing data');
        });
    };

    reader.readAsArrayBuffer(file);
};

